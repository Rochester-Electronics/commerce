{% extends "commerce/_layouts/settings" %}

{% set title = "Gateways"|t('commerce') %}

{% do view.registerAssetBundle('craft\\web\\assets\\admintable\\AdminTableAsset') -%}
{% do view.registerTranslations('commerce', [
    'Couldn’t reorder gateways.',
    'Customer Enabled?',
    'Gateways reordered.',
    'Handle',
    'ID',
    'Name',
    'Type',
    'Yes',
]) %}

{% block actionButton %}
    {% if not readOnly %}
        <div class="btngroup">
            <a href="{{ url("commerce/settings/gateways/new") }}" class="btn submit add icon">{{ 'New gateway'|t('commerce') }}</a>
        </div>
    {% endif %}
{% endblock %}

{% block main %}
    <div id="content">
        <div class="content-pane">
            <div id="gateways-vue-admin-table"></div>
        </div>
    </div>
{% endblock %}


    {% set tableData = [] %}

    {% for gateway in gateways %}
        {% set tableData = tableData|merge([{
            id: gateway.id,
            title: gateway.name|t('site'),
            url: gateway.getCpEditUrl(),
            handle: gateway.handle|e,
            type: {
                missing: gateway is missing ? true : false,
                name: gateway is missing? gateway.expectedType : gateway.displayName()
            },
            customerEnabled: parseBooleanEnv(gateway.isFrontendEnabled),
        }]) %}
    {% endfor %}

    {% js %}
        var columns = [
            { name: 'id', title: Craft.t('commerce', 'ID') },
            { name: '__slot:title', title: Craft.t('commerce', 'Name') },
            { name: '__slot:handle', title: Craft.t('commerce', 'Handle') },
            {
                name: 'type',
                title: Craft.t('commerce', 'Type'),
                callback: function(value) {
                    if (value.missing) {
                        return '<span class="error">'+value.name+'</span>';
                    }

                    return value.name;
                }
            },
            {
                name: 'customerEnabled',
                title: Craft.t('commerce', 'Customer Enabled?'),
                callback: function(value) {
                    if (value) {
                        return '<div data-icon="check" title="'+Craft.escapeHtml(Craft.t('commerce', 'Yes'))+'"></div>';
                    }
                }
            }
        ];

        var gatewayVueAdminTableConfig = {
          columns: columns,
          container: '#gateways-vue-admin-table',
          tableData: {{ tableData|json_encode|raw }}
        };

        {% if not readOnly %}
        gatewayVueAdminTableConfig.deleteAction = 'commerce/gateways/archive';
        gatewayVueAdminTableConfig.reorderAction = 'commerce/gateways/reorder';
        gatewayVueAdminTableConfig.reorderSuccessMessage = Craft.t('commerce', 'Gateways reordered.') ;
        gatewayVueAdminTableConfig.reorderFailMessage =    Craft.t('commerce', 'Couldn’t reorder gateways.');
        {% endif %}

        new Craft.VueAdminTable(gatewayVueAdminTableConfig);
    {% endjs %}

{% css %}
    table.data thead th.vuetable-th-slot-title,
    table.data thead th.vuetable-th-slot-handle {
        width: 20%;
    }

    table.data thead th.vuetable-th-type,
    table.data thead th.vuetable-th-store {
        width: 10%;
    }

    table.data thead th.vuetable-th-id,
    table.data thead th.vuetable-th-customerEnabled {
        width: 5%;
    }

    .gateways-margin-top {
      margin-top: var(--xl);
    }
{% endcss %}