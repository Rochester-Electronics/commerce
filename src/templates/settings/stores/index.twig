{% extends "commerce/_layouts/settings" %}
{% do view.registerAssetBundle('craft\\web\\assets\\admintable\\AdminTableAsset') -%}
{% do view.registerTranslations('commerce', [
    'Name',
    'Handle',
    'Primary',
    'Are you sure you want to permanently delete this store and everything in it?',
]) %}
{% set title = "Stores"|t('app') %}
{% set stores = craft.commerce.stores.getAllStores() %}

{% block actionButton %}
    {% if stores|length < craft.app.sites.getAllSites()|length and not readOnly%}

        {% set shownButton = false %}
        {% set addButton %}
            <a href="{{ url('commerce/settings/stores/new') }}" class="btn submit add icon">{{ "New store"|t('app') }}</a>
        {% endset %}

        {% if plugin('commerce').is('pro') and stores|length < constant('craft\\commerce\\Plugin::EDITION_PRO_STORE_LIMIT') and craft.commerce.catalogPricingRules.canUseCatalogPricingRules() %}
            {% set shownButton = true %}
            {{ addButton }}
        {% endif %}

        {% if not shownButton and plugin('commerce').is('enterprise') and craft.commerce.catalogPricingRules.canUseCatalogPricingRules() %}
            {% set shownButton = true %}
            {{ addButton }}
        {% endif %}

    {% endif %}
{% endblock %}

{% block content %}
    <div id="stores-vue-admin-table"></div>
{% endblock %}

{% set tableData = [] %}
{% for store in stores %}
    {% set tableData = tableData|merge([{
        id: store.id,
        name: store.name|t('site'),
        title: store.name|t('site'),
        url: url('commerce/settings/stores/'~store.id),
        handle: store.handle,
        currency: store.currency,
        primary: store.primary ? true : false,
        sites: store.getSiteNames()|join(', '),
        menu: {
            showItems: true,
            showCount: false,
            menuBtnTitle: ''|t('app'),
            label: 'Store Management    '|t('commerce'),
            url: url('commerce/store-management/' ~ store.handle),
            items: menuItems[store.handle],
        },
        _showDelete : store.primary ? false : true
    }]) %}
{% endfor %}

{% js %}
    var columns = [
        { name: '__slot:title', title: Craft.t('commerce', 'Name') },
        { name: '__slot:handle', title: Craft.t('commerce', 'Handle') },
        { name: 'sites', title: Craft.t('commerce', 'Sites') },
        {
            name: 'currency',
            title: Craft.t('commerce', 'Currency'),
            callback: function(value) {
                if (value) {
                    return '<code>'+Craft.escapeHtml(value)+'</code>';
                }
            }
        },
        {
            name: 'primary',
            title: Craft.t('commerce', 'Primary'),
            callback: function(value) {
                if (value) {
                    return '<span data-icon="check" title="'+Craft.escapeHtml(Craft.t('commerce', 'Yes'))+'"></span>';
                }
            }
        },
        { name: '__slot:menu', title: Craft.t('app', 'Store Management') }
    ];

    let config = {
      columns: columns,
      container: '#stores-vue-admin-table',
      emptyMessage: Craft.t('commerce', 'No stores exist yet.'),
      tableData: {{ tableData|json_encode|raw }},
    };

    {% if not readOnly %}
        config['reorderAction'] = 'commerce/stores/reorder-stores';
        config['reorderSuccessMessage'] = Craft.t('commerce', 'Stores reordered.');
        config['reorderFailMessage'] = Craft.t('commerce', 'Couldnâ€™t reorder stores.');
        config['deleteAction'] = 'commerce/stores/delete-store';
        config['deleteConfirmationMessage'] = Craft.t('commerce', 'Are you sure you want to permanently delete this store and everything in it?');
    {% endif %}

    new Craft.VueAdminTable(config);
{% endjs %}
